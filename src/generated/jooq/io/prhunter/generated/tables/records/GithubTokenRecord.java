/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables.records;


import io.prhunter.generated.tables.GithubToken;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubTokenRecord extends UpdatableRecordImpl<GithubTokenRecord> implements Record3<String, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.github_token.firebase_user_id</code>.
     */
    public GithubTokenRecord setFirebaseUserId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.github_token.firebase_user_id</code>.
     */
    public String getFirebaseUserId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.github_token.github_user_id</code>.
     */
    public GithubTokenRecord setGithubUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.github_token.github_user_id</code>.
     */
    public Long getGithubUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.github_token.access_token</code>.
     */
    public GithubTokenRecord setAccessToken(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.github_token.access_token</code>.
     */
    public String getAccessToken() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Long, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return GithubToken.GITHUB_TOKEN.FIREBASE_USER_ID;
    }

    @Override
    public Field<Long> field2() {
        return GithubToken.GITHUB_TOKEN.GITHUB_USER_ID;
    }

    @Override
    public Field<String> field3() {
        return GithubToken.GITHUB_TOKEN.ACCESS_TOKEN;
    }

    @Override
    public String component1() {
        return getFirebaseUserId();
    }

    @Override
    public Long component2() {
        return getGithubUserId();
    }

    @Override
    public String component3() {
        return getAccessToken();
    }

    @Override
    public String value1() {
        return getFirebaseUserId();
    }

    @Override
    public Long value2() {
        return getGithubUserId();
    }

    @Override
    public String value3() {
        return getAccessToken();
    }

    @Override
    public GithubTokenRecord value1(String value) {
        setFirebaseUserId(value);
        return this;
    }

    @Override
    public GithubTokenRecord value2(Long value) {
        setGithubUserId(value);
        return this;
    }

    @Override
    public GithubTokenRecord value3(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public GithubTokenRecord values(String value1, Long value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubTokenRecord
     */
    public GithubTokenRecord() {
        super(GithubToken.GITHUB_TOKEN);
    }

    /**
     * Create a detached, initialised GithubTokenRecord
     */
    public GithubTokenRecord(String firebaseUserId, Long githubUserId, String accessToken) {
        super(GithubToken.GITHUB_TOKEN);

        setFirebaseUserId(firebaseUserId);
        setGithubUserId(githubUserId);
        setAccessToken(accessToken);
    }
}
