/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables.records;


import io.prhunter.generated.tables.ScheduledTasks;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Record2;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledTasksRecord extends UpdatableRecordImpl<ScheduledTasksRecord> implements Record11<String, String, byte[], OffsetDateTime, Boolean, String, OffsetDateTime, OffsetDateTime, Integer, OffsetDateTime, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.scheduled_tasks.task_name</code>.
     */
    public ScheduledTasksRecord setTaskName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.task_name</code>.
     */
    public String getTaskName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.scheduled_tasks.task_instance</code>.
     */
    public ScheduledTasksRecord setTaskInstance(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.task_instance</code>.
     */
    public String getTaskInstance() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.scheduled_tasks.task_data</code>.
     */
    public ScheduledTasksRecord setTaskData(byte[] value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.task_data</code>.
     */
    public byte[] getTaskData() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.scheduled_tasks.execution_time</code>.
     */
    public ScheduledTasksRecord setExecutionTime(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.execution_time</code>.
     */
    public OffsetDateTime getExecutionTime() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.scheduled_tasks.picked</code>.
     */
    public ScheduledTasksRecord setPicked(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.picked</code>.
     */
    public Boolean getPicked() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.scheduled_tasks.picked_by</code>.
     */
    public ScheduledTasksRecord setPickedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.picked_by</code>.
     */
    public String getPickedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.scheduled_tasks.last_success</code>.
     */
    public ScheduledTasksRecord setLastSuccess(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.last_success</code>.
     */
    public OffsetDateTime getLastSuccess() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.scheduled_tasks.last_failure</code>.
     */
    public ScheduledTasksRecord setLastFailure(OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.last_failure</code>.
     */
    public OffsetDateTime getLastFailure() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>public.scheduled_tasks.consecutive_failures</code>.
     */
    public ScheduledTasksRecord setConsecutiveFailures(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.consecutive_failures</code>.
     */
    public Integer getConsecutiveFailures() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>public.scheduled_tasks.last_heartbeat</code>.
     */
    public ScheduledTasksRecord setLastHeartbeat(OffsetDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.last_heartbeat</code>.
     */
    public OffsetDateTime getLastHeartbeat() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for <code>public.scheduled_tasks.version</code>.
     */
    public ScheduledTasksRecord setVersion(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.scheduled_tasks.version</code>.
     */
    public Long getVersion() {
        return (Long) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, byte[], OffsetDateTime, Boolean, String, OffsetDateTime, OffsetDateTime, Integer, OffsetDateTime, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<String, String, byte[], OffsetDateTime, Boolean, String, OffsetDateTime, OffsetDateTime, Integer, OffsetDateTime, Long> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ScheduledTasks.SCHEDULED_TASKS.TASK_NAME;
    }

    @Override
    public Field<String> field2() {
        return ScheduledTasks.SCHEDULED_TASKS.TASK_INSTANCE;
    }

    @Override
    public Field<byte[]> field3() {
        return ScheduledTasks.SCHEDULED_TASKS.TASK_DATA;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return ScheduledTasks.SCHEDULED_TASKS.EXECUTION_TIME;
    }

    @Override
    public Field<Boolean> field5() {
        return ScheduledTasks.SCHEDULED_TASKS.PICKED;
    }

    @Override
    public Field<String> field6() {
        return ScheduledTasks.SCHEDULED_TASKS.PICKED_BY;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return ScheduledTasks.SCHEDULED_TASKS.LAST_SUCCESS;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return ScheduledTasks.SCHEDULED_TASKS.LAST_FAILURE;
    }

    @Override
    public Field<Integer> field9() {
        return ScheduledTasks.SCHEDULED_TASKS.CONSECUTIVE_FAILURES;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return ScheduledTasks.SCHEDULED_TASKS.LAST_HEARTBEAT;
    }

    @Override
    public Field<Long> field11() {
        return ScheduledTasks.SCHEDULED_TASKS.VERSION;
    }

    @Override
    public String component1() {
        return getTaskName();
    }

    @Override
    public String component2() {
        return getTaskInstance();
    }

    @Override
    public byte[] component3() {
        return getTaskData();
    }

    @Override
    public OffsetDateTime component4() {
        return getExecutionTime();
    }

    @Override
    public Boolean component5() {
        return getPicked();
    }

    @Override
    public String component6() {
        return getPickedBy();
    }

    @Override
    public OffsetDateTime component7() {
        return getLastSuccess();
    }

    @Override
    public OffsetDateTime component8() {
        return getLastFailure();
    }

    @Override
    public Integer component9() {
        return getConsecutiveFailures();
    }

    @Override
    public OffsetDateTime component10() {
        return getLastHeartbeat();
    }

    @Override
    public Long component11() {
        return getVersion();
    }

    @Override
    public String value1() {
        return getTaskName();
    }

    @Override
    public String value2() {
        return getTaskInstance();
    }

    @Override
    public byte[] value3() {
        return getTaskData();
    }

    @Override
    public OffsetDateTime value4() {
        return getExecutionTime();
    }

    @Override
    public Boolean value5() {
        return getPicked();
    }

    @Override
    public String value6() {
        return getPickedBy();
    }

    @Override
    public OffsetDateTime value7() {
        return getLastSuccess();
    }

    @Override
    public OffsetDateTime value8() {
        return getLastFailure();
    }

    @Override
    public Integer value9() {
        return getConsecutiveFailures();
    }

    @Override
    public OffsetDateTime value10() {
        return getLastHeartbeat();
    }

    @Override
    public Long value11() {
        return getVersion();
    }

    @Override
    public ScheduledTasksRecord value1(String value) {
        setTaskName(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value2(String value) {
        setTaskInstance(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value3(byte[] value) {
        setTaskData(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value4(OffsetDateTime value) {
        setExecutionTime(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value5(Boolean value) {
        setPicked(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value6(String value) {
        setPickedBy(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value7(OffsetDateTime value) {
        setLastSuccess(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value8(OffsetDateTime value) {
        setLastFailure(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value9(Integer value) {
        setConsecutiveFailures(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value10(OffsetDateTime value) {
        setLastHeartbeat(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord value11(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public ScheduledTasksRecord values(String value1, String value2, byte[] value3, OffsetDateTime value4, Boolean value5, String value6, OffsetDateTime value7, OffsetDateTime value8, Integer value9, OffsetDateTime value10, Long value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScheduledTasksRecord
     */
    public ScheduledTasksRecord() {
        super(ScheduledTasks.SCHEDULED_TASKS);
    }

    /**
     * Create a detached, initialised ScheduledTasksRecord
     */
    public ScheduledTasksRecord(String taskName, String taskInstance, byte[] taskData, OffsetDateTime executionTime, Boolean picked, String pickedBy, OffsetDateTime lastSuccess, OffsetDateTime lastFailure, Integer consecutiveFailures, OffsetDateTime lastHeartbeat, Long version) {
        super(ScheduledTasks.SCHEDULED_TASKS);

        setTaskName(taskName);
        setTaskInstance(taskInstance);
        setTaskData(taskData);
        setExecutionTime(executionTime);
        setPicked(picked);
        setPickedBy(pickedBy);
        setLastSuccess(lastSuccess);
        setLastFailure(lastFailure);
        setConsecutiveFailures(consecutiveFailures);
        setLastHeartbeat(lastHeartbeat);
        setVersion(version);
    }
}
