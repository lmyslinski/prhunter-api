/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables;


import io.prhunter.generated.Keys;
import io.prhunter.generated.Public;
import io.prhunter.generated.tables.records.GithubUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubUser extends TableImpl<GithubUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.github_user</code>
     */
    public static final GithubUser GITHUB_USER = new GithubUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GithubUserRecord> getRecordType() {
        return GithubUserRecord.class;
    }

    /**
     * The column <code>public.github_user.id</code>.
     */
    public final TableField<GithubUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.github_user.login</code>.
     */
    public final TableField<GithubUserRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.github_user.email</code>.
     */
    public final TableField<GithubUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.github_user.full_name</code>.
     */
    public final TableField<GithubUserRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.github_user.access_token</code>.
     */
    public final TableField<GithubUserRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.github_user.github_registered_at</code>.
     */
    public final TableField<GithubUserRecord, LocalDateTime> GITHUB_REGISTERED_AT = createField(DSL.name("github_registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.github_user.registered_at</code>.
     */
    public final TableField<GithubUserRecord, LocalDateTime> REGISTERED_AT = createField(DSL.name("registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private GithubUser(Name alias, Table<GithubUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubUser(Name alias, Table<GithubUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.github_user</code> table reference
     */
    public GithubUser(String alias) {
        this(DSL.name(alias), GITHUB_USER);
    }

    /**
     * Create an aliased <code>public.github_user</code> table reference
     */
    public GithubUser(Name alias) {
        this(alias, GITHUB_USER);
    }

    /**
     * Create a <code>public.github_user</code> table reference
     */
    public GithubUser() {
        this(DSL.name("github_user"), null);
    }

    public <O extends Record> GithubUser(Table<O> child, ForeignKey<O, GithubUserRecord> key) {
        super(child, key, GITHUB_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GithubUserRecord> getPrimaryKey() {
        return Keys.GITHUB_USER_PKEY;
    }

    @Override
    public List<UniqueKey<GithubUserRecord>> getKeys() {
        return Arrays.<UniqueKey<GithubUserRecord>>asList(Keys.GITHUB_USER_PKEY, Keys.GITHUB_USER_LOGIN_KEY);
    }

    @Override
    public GithubUser as(String alias) {
        return new GithubUser(DSL.name(alias), this);
    }

    @Override
    public GithubUser as(Name alias) {
        return new GithubUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubUser rename(String name) {
        return new GithubUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubUser rename(Name name) {
        return new GithubUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
