/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables;


import io.prhunter.generated.Keys;
import io.prhunter.generated.Public;
import io.prhunter.generated.tables.records.GithubTokenRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubToken extends TableImpl<GithubTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.github_token</code>
     */
    public static final GithubToken GITHUB_TOKEN = new GithubToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GithubTokenRecord> getRecordType() {
        return GithubTokenRecord.class;
    }

    /**
     * The column <code>public.github_token.firebase_user_id</code>.
     */
    public final TableField<GithubTokenRecord, String> FIREBASE_USER_ID = createField(DSL.name("firebase_user_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.github_token.github_user_id</code>.
     */
    public final TableField<GithubTokenRecord, Long> GITHUB_USER_ID = createField(DSL.name("github_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.github_token.access_token</code>.
     */
    public final TableField<GithubTokenRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.VARCHAR.nullable(false), this, "");

    private GithubToken(Name alias, Table<GithubTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubToken(Name alias, Table<GithubTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.github_token</code> table reference
     */
    public GithubToken(String alias) {
        this(DSL.name(alias), GITHUB_TOKEN);
    }

    /**
     * Create an aliased <code>public.github_token</code> table reference
     */
    public GithubToken(Name alias) {
        this(alias, GITHUB_TOKEN);
    }

    /**
     * Create a <code>public.github_token</code> table reference
     */
    public GithubToken() {
        this(DSL.name("github_token"), null);
    }

    public <O extends Record> GithubToken(Table<O> child, ForeignKey<O, GithubTokenRecord> key) {
        super(child, key, GITHUB_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GithubTokenRecord> getPrimaryKey() {
        return Keys.GITHUB_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<GithubTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<GithubTokenRecord>>asList(Keys.GITHUB_TOKEN_PKEY);
    }

    @Override
    public GithubToken as(String alias) {
        return new GithubToken(DSL.name(alias), this);
    }

    @Override
    public GithubToken as(Name alias) {
        return new GithubToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubToken rename(String name) {
        return new GithubToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubToken rename(Name name) {
        return new GithubToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
