/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables;


import io.prhunter.generated.Keys;
import io.prhunter.generated.Public;
import io.prhunter.generated.tables.records.InstallationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Installation extends TableImpl<InstallationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.installation</code>
     */
    public static final Installation INSTALLATION = new Installation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstallationRecord> getRecordType() {
        return InstallationRecord.class;
    }

    /**
     * The column <code>public.installation.id</code>.
     */
    public final TableField<InstallationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.installation.account_id</code>.
     */
    public final TableField<InstallationRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.installation.account_type</code>.
     */
    public final TableField<InstallationRecord, String> ACCOUNT_TYPE = createField(DSL.name("account_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.installation.sender_id</code>.
     */
    public final TableField<InstallationRecord, Long> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.installation.sender_type</code>.
     */
    public final TableField<InstallationRecord, String> SENDER_TYPE = createField(DSL.name("sender_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.installation.created_at</code>.
     */
    public final TableField<InstallationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Installation(Name alias, Table<InstallationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Installation(Name alias, Table<InstallationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.installation</code> table reference
     */
    public Installation(String alias) {
        this(DSL.name(alias), INSTALLATION);
    }

    /**
     * Create an aliased <code>public.installation</code> table reference
     */
    public Installation(Name alias) {
        this(alias, INSTALLATION);
    }

    /**
     * Create a <code>public.installation</code> table reference
     */
    public Installation() {
        this(DSL.name("installation"), null);
    }

    public <O extends Record> Installation(Table<O> child, ForeignKey<O, InstallationRecord> key) {
        super(child, key, INSTALLATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<InstallationRecord> getPrimaryKey() {
        return Keys.INSTALLATION_PKEY;
    }

    @Override
    public List<UniqueKey<InstallationRecord>> getKeys() {
        return Arrays.<UniqueKey<InstallationRecord>>asList(Keys.INSTALLATION_PKEY);
    }

    @Override
    public Installation as(String alias) {
        return new Installation(DSL.name(alias), this);
    }

    @Override
    public Installation as(Name alias) {
        return new Installation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Installation rename(String name) {
        return new Installation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Installation rename(Name name) {
        return new Installation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Long, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
