/*
 * This file is generated by jOOQ.
 */
package io.prhunter.generated.tables;


import io.prhunter.generated.Keys;
import io.prhunter.generated.Public;
import io.prhunter.generated.tables.records.ScheduledTasksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledTasks extends TableImpl<ScheduledTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scheduled_tasks</code>
     */
    public static final ScheduledTasks SCHEDULED_TASKS = new ScheduledTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScheduledTasksRecord> getRecordType() {
        return ScheduledTasksRecord.class;
    }

    /**
     * The column <code>public.scheduled_tasks.task_name</code>.
     */
    public final TableField<ScheduledTasksRecord, String> TASK_NAME = createField(DSL.name("task_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scheduled_tasks.task_instance</code>.
     */
    public final TableField<ScheduledTasksRecord, String> TASK_INSTANCE = createField(DSL.name("task_instance"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scheduled_tasks.task_data</code>.
     */
    public final TableField<ScheduledTasksRecord, byte[]> TASK_DATA = createField(DSL.name("task_data"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.scheduled_tasks.execution_time</code>.
     */
    public final TableField<ScheduledTasksRecord, OffsetDateTime> EXECUTION_TIME = createField(DSL.name("execution_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.scheduled_tasks.picked</code>.
     */
    public final TableField<ScheduledTasksRecord, Boolean> PICKED = createField(DSL.name("picked"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.scheduled_tasks.picked_by</code>.
     */
    public final TableField<ScheduledTasksRecord, String> PICKED_BY = createField(DSL.name("picked_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.scheduled_tasks.last_success</code>.
     */
    public final TableField<ScheduledTasksRecord, OffsetDateTime> LAST_SUCCESS = createField(DSL.name("last_success"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.scheduled_tasks.last_failure</code>.
     */
    public final TableField<ScheduledTasksRecord, OffsetDateTime> LAST_FAILURE = createField(DSL.name("last_failure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.scheduled_tasks.consecutive_failures</code>.
     */
    public final TableField<ScheduledTasksRecord, Integer> CONSECUTIVE_FAILURES = createField(DSL.name("consecutive_failures"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.scheduled_tasks.last_heartbeat</code>.
     */
    public final TableField<ScheduledTasksRecord, OffsetDateTime> LAST_HEARTBEAT = createField(DSL.name("last_heartbeat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.scheduled_tasks.version</code>.
     */
    public final TableField<ScheduledTasksRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    private ScheduledTasks(Name alias, Table<ScheduledTasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScheduledTasks(Name alias, Table<ScheduledTasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scheduled_tasks</code> table reference
     */
    public ScheduledTasks(String alias) {
        this(DSL.name(alias), SCHEDULED_TASKS);
    }

    /**
     * Create an aliased <code>public.scheduled_tasks</code> table reference
     */
    public ScheduledTasks(Name alias) {
        this(alias, SCHEDULED_TASKS);
    }

    /**
     * Create a <code>public.scheduled_tasks</code> table reference
     */
    public ScheduledTasks() {
        this(DSL.name("scheduled_tasks"), null);
    }

    public <O extends Record> ScheduledTasks(Table<O> child, ForeignKey<O, ScheduledTasksRecord> key) {
        super(child, key, SCHEDULED_TASKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ScheduledTasksRecord> getPrimaryKey() {
        return Keys.SCHEDULED_TASKS_PKEY;
    }

    @Override
    public List<UniqueKey<ScheduledTasksRecord>> getKeys() {
        return Arrays.<UniqueKey<ScheduledTasksRecord>>asList(Keys.SCHEDULED_TASKS_PKEY);
    }

    @Override
    public ScheduledTasks as(String alias) {
        return new ScheduledTasks(DSL.name(alias), this);
    }

    @Override
    public ScheduledTasks as(Name alias) {
        return new ScheduledTasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduledTasks rename(String name) {
        return new ScheduledTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduledTasks rename(Name name) {
        return new ScheduledTasks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, byte[], OffsetDateTime, Boolean, String, OffsetDateTime, OffsetDateTime, Integer, OffsetDateTime, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
